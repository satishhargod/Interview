Hello friends in my whole career I learned so many things but then at the time of interviews I forgot those things then I decided to learn everything in such a way that uh at the time of interview 

I can revise my learning and can crack the interviews otherwise what's the purpose therefore for node I collected all the node interview questions then I arranged them in a chapterwise sequence so that even if you are new to node you can still watch it code it and learn step by step if you are experienced then you can just watch and revise the questions by watching the video and if you are really confident then you can get this Excel file here clicking on view answer for any question to open the answer in the pp where all the answers are present and both this and PP download links are present in description on discounted prices okay 

hey my name is happy and I have given and taken many interviews in my 15 years of experience right now node has the largest number of backend jobs in the market so if you are planning and preparing for a node developer role that's a great choice and this video is for you now let me show you the topics from which we will cover the 100 questions 

questions the first section is node Basics and fundamentals here we will cover questions on topic like node main features project setups modules built-in modules in node everything then second section is Express framework we will cover questions from Express Basics middleware types of middleware rooting and template engines then in the third section rest API rest API Basics sttp methods codes course serialization deserialization authentication authorization Etc many more topics are there and questions are there in this video I will explain the answers with the help of diagrams for better understanding then code screenshots for practicality and finally the simplest definition which is very very easy to remember okay 

now before starting I want to say all the best to you may you also get the offer like many of my other students got who cracked the interviews I record all the success stories and post it in on it on my YouTube channel so whenever you get the job or offer just post a comment and share your success for now you can like or subscribe the channel okay great now let's start with the first chapter this is the first chapter covering very basic questions about node even if you know these questions still revise them at least once because sometimes we know only half the information and sometimes we know even incorrect information okay so you will get more pointers about node after watching these questions so let's start with the first question what is nodejs now most of us know two things for sure first we have programming languages like python Java JavaScript C for writing the code second we have Frameworks corresponding to these languages for example Jango framework for python spring for Java Express for JavaScript and net for C of course there can be more than one framework for a single language right now what is the role of framework the role of framework is to simplify the creation of large applications how by providing many inbuilt and reusable libraries classes functions Etc okay now as you can see nodejs is not here right that means nodejs is neither a language nor a framework so what is nodejs node JS is a runtime environment for executing JavaScript library now listen carefully a runtime environment is an environment that executes the program for example cpython is the runtime environment for Jango framework to run execute the python then jvm is for the spring framework then CLR is for NET Framework right so basically runtime environment is responsible for things like memory management and converting the high level language like Java JavaScript C to lower level languages lower languages like machine language which your system can understand okay so that is the job of runtime environment now Frameworks are like a wrapper over the runtime environment okay so Frameworks basically provide additional features over the runtime environment all right uh I think you know now what is runtime environment and it's a good start and here is the definition of nodejs for later revision from the book node is neither a language nor a frame not a framework node or node js same thing basically is a runtime environment for executing the JavaScript code on the server side why server side not client side that I will answer in upcoming question how know is a runtime environment on the server side and what is V8 basically so let's quickly understand this see we have JavaScript language now JavaScript language will run and will be executed by the browsers like Chrome and others that we already know how browsers run JavaScript basically every browser has a JavaScript engine inside it like Chrome has the V8 JavaScript engine Edge has chakra Firefox as Spider monkey so inside Chrome browser V8 is the JavaScript engine which runs the JavaScript code now an engineer ran uh used the same V8 JavaScript engine and created nodejs as a wrapper over it okay therefore now with nodejs runtime environment JavaScript can run outside the browser also okay outside the browser and and as browser execute the JavaScript on client side now we have the nodejs to execute the Javas script on server side when I say client side it means browser okay it's related to browser and when I say server side it's basically the back end okay great that's the whole idea and same is written here and a very simple and easy VA definition is also written here for or later revision from the book what is the difference between a framework and a runtime environment I already covered this but I am covering it separately this question so that you do not miss it when you are revising okay so here are the languages their runtime environments and then their Frameworks remember one language can have more than one runtime environment and can have more than one Frameworks okay so it depends actually and here is the definition of a runtime environment the runtime environment focuses on providing the necessary infrastructure for the code execution and including some basic services like memory management and input output operations okay that is runtime environment framework primarily focuses on simplifying the development process by offering stru structured set of tools libraries best practices reusable classes and functions okay so framework is like a rer over the runtime environment to make the application development process more and more simpler for the developers that's the answer to this question here is a quick notification if you are the kind of person who want to go extra mile or who do not want to miss anything then here is a full node interview course with 100 more questions in total 200 questions additional topics like mongodb scenario based security Performance Based and many more questions are covered here also the link of this PowerPoint and PDF book is in the description of this video for the revision purpose okay many students were able to crack the interviews my VI my courses and you can be the next all right let's continue again with our next question what is the difference between nodejs and express.js again a very short answer question you already already know this diagram right and the difference is here nodejs is a runtime environment that allows the execution of JavaScript code on server side whereas experts. JS is a framework built on the top of the nodejs it's like a wrapper over the nodejs why was it built or created this express.js the answer is here uh it is designed to simplify the process of building web applications and apis by providing you know simple routing system middleware support Etc to simplify okay so basically by using node plus Express building server side AP will be very very easy and fast that's it what are the differences between client side and server side very important question for understanding the complete flow from the client to the server let's quickly explore so suppose you are a user and you open any website in your browser by entering the URL now one request will go to the UI server which is mostly created in angular react or any other Yi technology okay now for some simple operations like image download that can be and the operations which can be performed on the existing data which is already there in your UI like sorting filtering that can be done these T kind of operation can be done by the UI server itself and the UI server send the HTML and JavaScript as a response to the user browser okay but for some complex operations like fetching more data or different data for that the client has to send the request to the back end or API server and that server again written in the JavaScript language but this time with the nodejs run time okay then our node API will fetch the data from the database get the response and send the response with the data back to the UI so the UI will basically finally display that data to you now here the browser and node will both execute JavaScript right but there are differences between the way the browser will execute and the node will execute so let's see first the browser runs on the userb browser whereas node runs on the server nothing is special second difference is HTML CSS and JavaScript are languages in the browser whereas JavaScript is the language in node next difference is document window Navigator and event objects are present in the browser but they are not there in the node so for example this document. getet element by ID so that kind of things you cannot do in node because nodejs of course does not need any interaction with the direct interaction with the UI right next difference is like uh request response server and data these object database objects are present in node but no not in browser so of course these are important objects for handling the request and response on the server side so browser don't have much to do with it okay last difference is browser responsibility is to handle the UI display interaction of the users and the client side logic whereas the server site or node handles business logic like data storage access authentication authorization Etc Great so these are some differences between how the client side execute the JavaScript and the JavaScript in the server side node congratulations on completing the first chapter of the node Basics now my friend if you have not yet started giving interviews then start giving interviews okay some interviews are very easy and I hope we are not missing those opportunities all right now in this chapter we will cover those questions on the main features of node because of these features only node is so popular we use them in our projects but many times we do not know how they are working internally okay but after these questions you will be never confused about the concept single threaded multithreaded synchronous and asynchronous Concepts okay so let's start with the first question what are the seven main features of node this is a very very important questions we already have many Technologies for creating the web applications like java.net Etc right then why why node is the best choice now that is because of the nodes features only right so here are the seven features node like JavaScript is a single threaded the program second is for program in node executes in a asynchronous way then node applications are even driven then node uses V8 JavaScript in which you already know then uh node is crossplatform and therefore it feature can run on can any operating system right then node has npm node package manager which manage its all its dependencies finally mode has realtime capabilities meaning it is very good for handling B directional communication by Direction communication like chat application gaming application where user basically interact in real time right great now in upcoming question I will explain all the features one by one and uh this I will show the and I will also show the advantages and I will show how those advantages are basically coming from these features only okay so that we will see in upcoming questions what is single threaded programming let's quickly understand we already know first user from the browser send the request to the client and then to the server side right now inside the server suppose the request has to perform five independent task for that in the case of normal programming a single thread will be created like this then first This Thread T1 will start start the task one now listen carefully thread T1 now will wait until task one is completed okay T1 is waiting once task one is completed T1 will go to the tasks 2 and start it and then again thread t one will wait until the task two is completed then same for task three three and finally the completion for task four the and after completion like for after the task four the thread even will inform the API about the completion of all the task now this is simple straight forward single threaded programming and it's a synchronous programming because here tasks are executing one by one and one task is waiting for the previous task to be completed right but in node or JavaScript we can achieve a synchronous programming even with the single thread and that I will explain you in the upcoming question what is synchronous programming now many have confusions between synchronous and single thread programming for example here is the single threaded execution which I previously explained uh remember single threaded programming means we are talking about single thread okay a single thread is responsible for starting the task now with a single thread we can achieve both synchronous and asynchronous operations okay here by using the single thread we are doing synchronous operations because synchronous programming means each task should be performed one after the other okay that's what we are doing here right so that is synchronous programming the disadvantage of this synchronous programming approach is performance this synchronous approach will take more time see uh a total like it's 10 then 8 4 5 total 27 seconds will be taken to execute all the task and one more problem is there the synchronous approach is a blocking approach because here until task one is completed task two has to wait right so task one is like a blocker for the task two so that is the blocking thing now in order to perform the task concurrently for improving the time performance and for a non-blocking pro uh approach we will see the asynchronous approach uh approach programming in the upcoming question by using what yes node node okay which which actually happened actually in node great so finally here I have written the simplest definition for the synchronous programming which I already explained and also the difference between synchronous and single thread programming for later revision purpose what is multi-threaded programming let's quickly understand multi-threaded programming so that we know the difference between single thread and multi-threaded so here the user and client side send the request to the server you already know then the server will first create a thread T1 which will start this task one okay now listen carefully in a multi-threaded approach when one thread starts one task and it then it sees another task after that then immediately another new thread T2 will be created and that T2 will start the task to okay so while the T1 thread is waiting for task one to be completed in parallel the new thread T2 will start Task two and therefore both tasks are being executed in parallel similarly when T2 is start Task two then for the next next task three another T3 is created which will start Task three and then T4 thread is created for task 4 finally you can see how different tasks have different threads in a multi-threaded environment this approach is very good for CPU intensive task where many tasks has to be performed parallel if you remember our Cod computer processor and it has multiple codes right so having more CES means they are much better for multi-threaded programming applications okay for heavy desktop software it is very good this multi-threading approach but for internet apis this multi-threaded approach can be a problem because multiple threads can create deadlock problems if not properly handled that's why we prefer a single threaded asynchron asynchronous approach for JavaScript and node applications what is a synchronous programming now this is our main taret target and this is what we will use in our node applications previously we saw how synchronous programming is not good for performance and also it's a blocking approach that's also something we will solve here in nodejs suppose a request has to complete four tasks okay like this then first a single thread is created which will initiate the task one okay now listen carefully now this thread T1 will not wait for this T this task one to be completed will not wait okay instead after initiating task one this thread T1 will immediately jump onto the to initiate or start the next task 2 then after initiating task two T1 jumps on to initiate task task three and then task four great now you have the most important point about single threaded asynchronous operations and the point is that our single thread T1 is just initiating the task and not waiting for its completion right so now you can imagine how in this case our tasks are running concurrently uh and if you remember in synchronous way the total time was 10 + 8 + 5 4 + 5 right uh 27 seconds total which at which is the least time but now the total time taken can be 10 seconds in the best case but time will can be something more it depends on your Hardware also okay but in any case it will be better than the synchronous operation so that was we Pro solved the first problem the time and performance problem another problem was the blocking issue so here Task 1 2 3 4 while executing are not blocking the execution of the next task okay so when task one is executing task two in parallel concurrently can also execute okay so therefore it's a non-blocking way the synchronous approach all all right that's all about asynchronous programming now you might ask one more question like when task one is executing independently then this thread T1 is busy in starting the other tasks right it is doing its work so how the system will know when the task one is finished so there comes the role of the events in node whenever any task is completed completed or finished it will raise an event okay so then that event will immediately listened or heard by our thread T1 and our thread will immediately stop whatever it is doing at that point of time okay and what T1 will do on priority basis it will immediately report the task completion to the source and then again T1 will resume whatever it was doing early here so that's why we also call nodejs as an has an asynchronous programming approach and also the event driven architecture okay in upcoming question I will discuss more about events before that here are some steps for the execution of asynchronous operations using a single thread in a node which I already explained writing it down for quick re revision later from the book and here is the simplest and most complete definition of a synchronous in node a synchronous flow can be achieved by its single threaded non-blocking and even driven architecture remember in Java Script also by using the asyn AIT or promises you can achieve this asynchronous programming okay what is the difference between synchronous and asynchronous programming I already EXP explained them separately but here I have also written down the differences uh it's Point by point the and you can see I have also pointed out the advantages of the as synchronous programming over the synchronous programming so if you understand synchronous asynchronous programming then these difference and advantages are very easy to understand you can either pause the pause the video and read it or later you can revise the differences from the book that's the quick answer of this question what are events event Amer event Q event Loop and event driven in node all right this question will clear up all your Concepts about the events in node first of all what is an event an event is like a signal that something has have happened in a program like a notification like a action has happened like if you remember we have those click events in the UI right so now these events are notification must have some Source from where they are these events are originated right so these sources are called event emitters uh who generate the events like this event one and event two all generated events are then stored in this in a que okay which we call what event Q in node okay clear until now then node will pick one event event at a time and the event handler or we can also say it event listener will perform the code as per the event requirement so basically here you will write the code that how you want to handle the event in your application okay so it's nothing like event handler is nothing but it's a function okay so written by us okay in case of threads it is written by the node to how to handle it asynchronously inside the node r time environment okay all right after that the next event will be picked by the event handler from the event q and the it goes on like next event so and so on and so on so this the picking up of these events like this one by one from the event queue in order in in the same order is called the event Loop okay so great that's the whole story easy right about how the events are originated and how they are they processed and also here I have the written the simplest and the most easy to understand definitions of uh events event emitters event cues event handlers and event Loops okay all I already explained and finally we have this event driven architecture event driven architecture is a combination of all of the above what does it means it means operations in node are driven by or based on the events only okay driven by events so that's why we call node as the event driven has the event driven architecture great that's the answer to this question what are the main features and advantages of node so in interviews many times we directly started speaking about the advantages of node without relating them with the features for a great answer you should know know that from where the advantages are coming okay every advantage in any technology comes from some of the from some features of that technology right so therefore if we are able to relate both features and advant Advantage then it's a great answer and you will also feel it after listening the this answer here are the five features you already know right now uh nodejs has a synchronous operation it has a Google Chrome V8 JS engine it has event driven architecture it's a crossplatform and it uses the JavaScript language okay so these are the features now here are the advantage we get from these features first because of asynchronous nodejs can enable handling multiple concurrent requests and can do not on blocking execution of threads right then second because of node is built it is built in V8 JavaScript engine from Google Co Chrome therefore nodejs execute code very fast very quickly okay JavaScript engine only executes your JavaScript code right next Advantage is because node is even driven architecture therefore it is very efficient in handling a synchron operations and events okay handling events is will be very easy uh because threats will respond as per the events generated if you remember the synchronous operations right also in the chat applications gaming applications why events are important because there are too many events generated when by directional Communication in chat applications so that will be very easy and then node will be a great choice okay next is uh cross platform uh it supports deployment on various operating systems like Windows Linux and which basically enhancing the flexibility of the your application so that it can be hosted in any operating system then next Advantage is as we code in the JavaScript language only in node so basically there is no need to learn a new programming Lang language okay so that's also an advantage same language can be used for the client side and for the server side development also right then last and because of all of the above feature node is suitable for building scalable applications that can handle increased loads scalable means so suppose if tomorrow when your application will grow after 2 year 3 year it will be become bigger and bigger and then if it is developed in node your application then it will be very easy to grow it to scale it and add more features to it so that is the scalability all right that's the whole story of the features and the advantages of node what are the disadvantages of node when to use or when not to use node so everything of course has some disadvantages is also in this world so does the node also have something you already know when to use node for your project right it's ideal for realtime applications like chat application online gaming collaborative tools because of its event driven architecture then also it is excellent for building lightweight and scal scalable rest apis that handles a large number of concurrent requests or connections okay then also it's a great choice for microservices based architecture because it have the modular and escap label system so modular approach is there in the node also now the main question here is when not to use node so you should not use node in project that demand demand CPU intensive task for example video processing for example some software which require heavy Al algorithms to be executed which required multi-threading so because in that case multi-threaded technologies will be a great choice not a single thread technology like node okay because multi-thread can perform multiple task multiple core they can use the heavy servers and that so that's the answer of this question you should not use node for simpu intensive task congratulations on completing the last chapter where there is a will there is a way believe me or ask any experienced person interview preparation is the best way of learning and the best source of earning also okay all right now in this chapter we will explore these questions about project setup and most importantly modules as a developer we create modules interact with modules and there are different type of modules so let's start start with the first question of this chapter how to set up a node project uh this is not an interview question but if you are new to node then just do these seven steps very quickly I will show you so if you already know then skip this question okay no problem so first download nodejs from the internet and install it second download VSS code or any code editor and again install it then create a new folder uh uh anywhere in your system like my first project a folder okay then open VSS code which you installed and open this my first project folder in it then in vs code open the terminal and run this command npm init y okay hyphen y so this then create a new Js file appjs like this in your project folder okay so this is the your first appjs file now you can run your project nodejs application by using this command node app.js so great so this is your project is ready and uh on the left you can add more files as per your application and here you can see the file view at the bottom you have the terminal now to see this terminal you have to click this three dots above and then View and terminal option is there actually at the top and then you can write the commands here in the terminal okay that is the purpose of terminal for executing the commands great I know it was very quick and it was not in detail but yes because this U is more focused on the interviews not on the setup right this is not an interview question what is npm what is the role of node modules folder in your project if you expand this node modules folder then here you can see the libraries the dependencies that can be used in your node project okay these dependencies will make your development easy and simple so if you delete any of these dependencies then might be some functionalities of your node project will not work stop working okay so never touch this folder great what are node modules in the node modules folder contains all the dependencies of the node project and what is npm npm is the node package manager that manages this node modules folder okay or you can say manage these dependencies for for your node uh project that is npm what is the role of package.json file in node when you create your project for the first time you will find this package Json file in the in your project this package Json file contains the project metadata metadata means the information about your project for example here you can see the information about uh this project project name project version project description project author project license okay so this is the information about this project right and the same thing I have written here also for later reference again metadata is just the information like a book is there so content in inside but the name of the book the author of the book this is the information the Met data about the book okay what are modules in node what is the difference between a function and a module so not in just node but in every other technology module also means a piece of functionality okay what it is a functionality for example in an e-commerce e-commerce application like Amazon orders products payments these are different modules so what is a module here is the definition a modules contains a specific functionality that can be easily reused within a nodejs application second point is ideally in node a JavaScript one Javascript file can be treated as a single module so here this my module 1. JS is a one module is one module which contains this say hello function now the question is okay so what is the difference between a function and a module see module is a concept for example order is a module in an Ecommerce application but inside the order module there can be one function or even more than one function multiple functions like in order we have get order list submit order and post order right so that is the difference okay and here I have written a module is a broader concept that incapsulate the functionality while a function is a specific set of instructions uh statements within that module and yes modules can contain multiple functions and variables great in short you can say that module is a feature which is implemented by using functions in node project normally we create JavaScript files so like this one Javascript file represent one module but yes you can put more than one module in a single Javascript file but that is not a recommended approach you should never do it okay so great that's the answer to this question how many ways are there to export a module now inside a module we mostly have functions like this but we can also have variables or objects inside modules okay now by default these functions variables objects are available only inside this same Javascript file and they are not accessible outside this file okay by default now to make them accessible outside in other files we have to export them for that one way is to use modules. exports object like this module. exports. function name equal to function name now same for exporting variable and objects also you can do the same this is one way another direct way direct way of exporting is like this this is direct here we are directly using the export object to export the function variable function variable or any object right directly exporting there is no need to write separate export statements in this case and this is like a shortcut approach which is very famous nowadays and the same is written above them for later revision from the book a very short and simple question what will happen if you do not export the module you know the answer if you do not export the module then the module function will not be available outside the module okay simple how to import single or multiple functions from a module now normally we have only one function inside a module like this and we can export that function like this as well module. exports equal to function name this is the shortcut way okay it is for just one function remember but if you have multiple function then you should use the usual approach the module. exports. function name equal to function name like this only okay so again this is the shortcut syntax now in order to import these functions in other files first you should use the requir function which is an inbuilt function inside the node that is already there inside the node to help you then to import a single function you can use the module name and pass the parameter required by the function okay directly so there is no need to use the function name here uh node will automatically understand and detect because you have only one function there in your module from where you are importing right but if you have more than one function then we should use import the fun uh function like this module. function name and then pass the function parameter so basically we have to then provide the function name because we have more than one function that's the answer for importing the functions and same is written here what is module wrapper function now what actually happen if you create a Javascript appjs file in your node project like this and you will run it then it will give you the proper output like this right but how here we do not have any function so how it is executing without the function okay so actually internally what node will do it will convert this code or you can say wrap this appjs code inside a function like this so now now the same code you can see the wrapped inside the function okay automatically by node you do not have to do this and this function will be executed finally so this raer function is obviously automatically generated by the node you need not to write this so the why why why you need not to write this the purpose is basically to make things simpler and shorter for the Developers so that's the answer and the simplest and easiest uh definition is here in nodejs each module is wrapped in a function which we call the module wrapper function be before it is executed right what are the types of modules in node we have three types of modules in node J first is built-in modules or we also call them core modules these are already present modules in the nodejs that provides essential functionalities common functionalities for example file system HTTP server path manipulation utilities so these are provide modules are provided by the node we we have to just import them and use them and we can call their functions okay second type of modules are local modules these are the user defined modules which as a developer we have to develop like develop uh developers have to develop as per their project requirements okay so then we can create these modules we can export their functions these modules so that other files in our project we can also use there also okay last are third party modules these are like external packages or libraries created by the community outside basically for providing the ex uh additional functionalities for your node projects now to use them you have to first install them okay because they are not already present in your node and then you can install by npm install commands and like this npm install lades this lades is a external package okay third party module and then you can use them in your application great these are the three types of module and all I have explained is written here for later revision from the book great job my friend you will always find peoples last year this year next year who are always complaining about the job market but basically they are saying I'm satisfied and I'm not looking for the job change okay that is their mindset negativity is there but you have to be just calm think positively and take actions okay all right coming back to this chapter now we will explore these questions on top built-in modules this is very important because you will use these buil-in modules in many many many places in your real projects okay so let's start with the first question of this chapter what are the top five buil-in modules commonly used in node projects now there are many buil-in modules in node but the most famous and most you used modules are these FS module path module OS module events and HTTP modules I will quickly cover the role and the importance of these modules in the upcoming questions explain the role of the fs module name some functions of it this is one of the most important built-in modules in node in short it is used for managing files let's quickly see the code example first import the fs module by using the require function like this then you can use the read file function of the fs module to read the contents of a file asynchronously here the first parameter is the name of the file from which we are reading the second parameter is the format of the file and the third parameter is this call back function in which we are passing two parameters the error and the data while so while reading from this fx. txt file if there is any error we got then we are just returning black okay and if there is no error then we are reading all the content of this fx. TST file in this variable data and printing content here in the console so I'm printing this is my logic and uh in as as per the application requirement the logic can be different okay you can do anything with this data which we are getting from the file now similar to this we have another important function of the fs module called the right file function here the first parameter is the blank or empty file name this is blank where we here we will write the content okay we this is right function then second parameter meter is the content source and the turn parameter is some same call back function to handle if there is any errors or any other scenario okay so that's it finally the definition of FS module is FS module in node provide a set of methods for interacting with the file system okay great now here are seven main functions of FS module read and write you already know append file used to append the new data with the existing data of a file then unlink function is used to delete the specified file then redirect function is used to read the content of directory sorry not redirect it's read directory di then mkd method is used to create a new directory or you can say folder then rmdir method is used to remove a specified folder directory Great that is the answer to this question you do not have to remember the names of all these methods but the more you know about something the better you can explain it right explain the role of the path path module name some functions of it let's start with the definition the path module provides utilities for for joining resolving parsing formatting normalizing and manipulating paths okay or you can say URLs for example here first we can import the path module and then here is the first me method of the path module which is join method very simple you can see this is used to join folders names and file names and it's creating a full path right very simple now second method of path module is very important this is parse method which is used for parsing okay now listen carefully passing means whatever string you pass here as a parameter our pass method will convert that string into an object and that object I am printing here see this object will are always always have these properties root name directory or fer name base name file extension name and file name these are properties of the object so what happened basically now your path string path is broken down into several parts and therefore now it is very easy to understand and reuse these broken parts right and that is the purpose of this Parts method uh so because now you can perform separate operations on this separate object properties as per your application requirement okay great so it is one of the most important function of the path module other than that I have mentioned here five more functions of path module and what they do that I already written here in the comments in very very simple words you can just pause the screen and read it once or you can later also download the book to revise it explain the role of the OS module name some functions of it the answer is OS module in nodejs projects provide a set of methods for interacting with the operating system very simple for that we will first import the OS module like this then we can use the type method of the OS module basically which will provide the type of the operating system on which your node application is running then you you can get the user information of the operating system by using this user info method of the OS module okay so like this they be the output then so also you can get the memory information of operating system in byes using the total memory method which provides the total memory and the free memory method which will provide the memory that is available in your operating system okay now you might ask why we need this operating system information in our node project okay so basically sometimes we deploy node projects on Windows sometimes on uh Linux okay so then basically servers can be different right different on different operating systems so then we have to perform some functionalities as per the operating systems to make our application crossplatform that is the main point okay because node is crossplatform one application can run on any operating system so for that sometimes we need operating system on information as well okay and the same thing I have written here also for later reference explain the role of events module how to handle events in node most of the things about events and this diagram I already explained in previous question right you remember here are the definition of events event emitter event Q event listener event Loop and event driven architecture all I already explained now let's see the event module how to implement in node for that first we will import the event module and then from that we will get a class event emitter okay now this class has many functions and properties and to use those function s first we will create the instance of this event object event emitter class like this so this we we call instance or object also now we can use on function of the my emitter object to register the event listener now you can ask okay so what is the meaning of registering the event listener or event handler now listen carefully registering an event listener means whenever whenever event of this event name okay which is the first parameter whenever this event name will occur then the second parameter of this on function which is a complete function logic it will execute okay got my point so that is event listener so great so until now the event this event name is still has not occurred okay in this code okay so let's uh create this event here see you see we are raising or emitting the event event Name by using the emit emit function of the my emitter object only okay so what will happen now the above event listener will listen to it when this uh event will be emitted uh it will be created then above event listener will listen to it match the event name and run this function logic okay function Logic for it that's it clear great finally here you will find the output now remember in real application you will not emit events like this uh you will get some request from the frontend application and then internally your node that request is a event only okay and then your node application will handle and then assign it to the get postp put okay which you will do in your code so and also remember here first we have to register the event listener before emitting the events if you emit the event first and then you will register the event listener code that means event listener is not yet registered and hence you will get the error great that's the whole story of the event implementation in the code and here I have written a few points about uh again about event event am meter which I already explained and I hope you like this answer what are event arguments in the previous question I explained you this code right how can we import the events module get the event amiter class from them there we created the am my amiter object then we registered the event listener by using the on method of the my emitter object now when we are emitting the event then we can also pass some additional information in the form form of parameters like these argument one and argument two along with divent and that additional information is called event arguments these arguments will then be received by these parameter of the call back function above and then we can use them inside the function as per our application requirement okay so in short if you want if you want to pass some data along with the event then you can use the this event arguments and the same thing is written here also what is the difference between a function and an event sometimes we get confused by these kind of questions so let's remove the confusion 100% Today what is a function first you already know a function is a reusable piece of code in your application that performs a specific task whenever that function is called right clear whereas events represent present an action okay for example when your node API application gets some request from a front end server like this that means some action happened and therefore therefore an event will be created in your node application okay now it may be that you can't see that it may be that that event code is there in some node library and so you can't actually see it and those events actually is handled by your node applic node back in background runtime and you can handle by using them in get postp put methods right so remember internally events can call single or multiple function to do the task so events are like when some event is created then function will be exe functions can also execute so that is the difference and that is the short answer to this this question same is I have written here whatever I have explained in a very short format what is the role of HTTP module in node this is one of the most important modules in node let's first quickly understand the request flow before understanding the role of the sttp module in a node application suppose you are a user and you open a node API based website in your browser so the request will first go to the UI server which will can be which can be an angular react JavaScript any frontend technology right now for static data like images Styles or for existing data uh existing data operation like if user will do sorting filtering on the existing uh orders or in in e-commerce application for these kind of of operation the UI server only will do it by itself and send the response back but if the user is requesting for additional data or something important then UI server will send the HTTP request with the API server Ur URL to your node application API now listen carefully to be able to receive these request from the front end your API must be present or hosted at some URL address with the port number on the internet right so that hosting will be done by HTTP module so the HTTP module will create an HTTP server that will be listening to the HTTP request from the UI and then the same HTTP module will send back the http response to the these UI and then UI will of course send the response to the user browser great I think now you know the role of the HTTP module right uh in upcoming question we will quickly see the implementation also but the and and same thing I have written here the HTTP module can create an HTTP server that listen to server ports and gives a response back to the client that is the role of HTTP module in node what is the role of create server method of the HTTP module answer is very simple the create server method of the HTTP module in node is used to create an HTTP server now let me show you the code quickly and in five steps we will create the HTTP server by using HTTP module okay first step is import the HTTP module second step is to create an HTTP server by using this create server method like this so basically here your server is now created and it is able to handle request and response which it is accepting as the parameter now here the second parameter of this create server function is itself a call back function right so which is basically the logic when you will receive the request which this logic will execute after you receive the request and before sending the response back this in between logic will execute got it okay so but right now it's not complete your server is still not able to listen to any request okay your server is created but it's not listening for that you can first choose a port number on which the server will listen the incoming request and finally by using this listen method of the above of server object now your server is able to listen to the request at this port number clear great so finally to test this code test this code you run this command node create server.js which is the Javascript file name only and when you will open the browser and you will enter this URL Local Host with the port number and you can see the response of your node applications why you can see the response here in the browser because it is hosted by the HTTP module and here is this hello world is coming from the second parameter function of the create create server method great that's how we can create a server and enable it to listen the HTTP requests from the UI server that's the simple answer of this question great now you completed the fundamental of node now here is the second milestone Express framework we know Express is a framework and now we will see different questions from Express Basics middleware types of middleware rooting and template engines and that is step by step all these features are coming from Express framework only so first we will cover Basics and here are the questions you know very basic very size and we will quickly finish these chapters so let's start with the first question of this chapter and and yes if you think any question is too easy for you then you can just increase the playback speed of this video what are the advantages of using Express with node why we use node why we use express with node there are reasons behind everything right here I'm going to share four advantages of Express first is Express simplify web development you know the roles of framework in software development right they basically simplify the software development process by providing many built-in methods and features the same is true for Express framework also second Advantage is middleware support yes middlewares are very important for handling requests and resp responds in a proper way and with Express framework managing multiple middle wees and handling millions and millions of requests is very easy yes definitely I will cover this middleware in Express in upcoming question but for now I'm just giving you the overview Okay the third Advantage is Express provides flexible routing system so basically when any request come you must redirect them prop properly to the methods of your rest API okay based on the request URL right so therefore with Express framework it is simple to understand the URL patterns and redirect them properly with minimum amount of code that is the benefit again I will cover this routing in Express in upcoming questions okay in detail then last Advantage is template engine integration so sometimes we create some Dynamic HTML at server side rather than client side and template engine integration help us in creating those Dynamic HTML content and basically here we combine the HTML template with the data from the database or anywhere so basically Express framework will make this process very very easy and simple for you great these are some of the top advantages and features of Express which you must remember I will also cover their implementation separately in detail in upcoming questions but all right I think I also have written very simple description here also which I already explained but yes this can help you in the last minute quick revision just before the interviews okay that's it how do you install Express in a node project uh this is not an interview question but if you are new to express then the answer is very simple open the terminal in your code vs project and run this command npm install Express and press enter and yes this will install the Express framework for your project and now you can use the features of the Express in your project okay so that was the short answer of this question how to create an sttp server using expressjs setting up HTTP server without much code is one of the primary responsibility of this Express framework okay uh if you remember then to set up HTTP server we use HTTP module right and that was without uh this Express framework first we import the HTTP module then we use the create server method of the HTTP module to create the server like this now the server is created but it is not yet hosted or you can say server right now can't listen to the U requests from the client so to be able to listen to the request from AI uh first we will select a set a port number and then we have to use this listen method of the server this all I already explained now the server will be able to listen to the request from the UI uh remember if you do not listen the request then the URL Local Host 3,000 will not work in the browser okay this is the process for creating a server using the HTTP module now the same can be achieved using the Express framework in node to create use it's a four step process okay how to do this first import the express before of course you have to install the express right second create an express application and assign it to the app variable this means your now your server is created okay and the name of the server is app see here you do not have to use the create servers method so that code you are saving here then set the port number and then we will call the listen method of this app server which is basically start the express server that is the whole process of creating an HTTP server using the Express framework very very simple and basic now you can ask one thing when we already have this HTTP module then why we are using the express module for creating server the answer I think you already know because creating Server Express framework only one this is only one feature but Express framework will provide many other advantages which we will also explore in the upcoming questions okay so that's the answer to this question and here I have written also it at the top how do you create create and start the express application this question I already covered but uh I'm just putting it down here writing it down this question for revision purpose so that when you are revising all the questions list then you don't miss the small small things okay uh so to you already know the answer to create an express application we have to first import the express module and then call the Express function to create the server okay secondly you can start the server or listen to the request from the UI or from anywhere uh any client by calling the listen method of this application server okay here you have to provide these two parameters first the port number and second is the message you want to log but yes it is optional great that's the quick answer to this question as I said the last chapter was very quick and here is the next chapter Express that Express of Express that is middleware middleware is like the middleman who helps you in reaching your destination okay for example node JavaScript react angular all these are middle wees or you can say middle mans which helps you in becoming the full stack developer right so here are the questions which we will explore in this chapter what is middleware how to implement is what what is the next parameter what is request pipeline etc etc so let's start with the first question of this chapter what is middleware in Express JS and when to use them very very important question let's understand with the help of a flow diagram first we already know we have a front end and here is our rest API suppose now let's suppose it is created in Express right that we have to assume now the St AP request will come from the front end and first inside the rest API the request will hit the middle Weare okay now remember one thing middleware is nothing special but it's a function only now you may ask one question uh you can ask like when middle wees are function then why are we not just calling them function why we are using this middleware word for them see callbacks Constructors middlewares all these are functions only okay but but because they do a specific kind of job a specific kind of functions they are therefore we assigned them a different name to them so that they can be identified in a very clear way okay so for example here middleware function act as a middleman between the request and the application end points the getput post okay end points so it's acting as a middleware okay clear all right now this middle wear or function will perform some logic inside it here with the with the request it will perform the logic and then by using the next method it will pass the HTTP request to the next middleware okay then this second middleware will also execute the code inside it and pass it to the next middleware and after executing all the middle wees only the then only the request will reach to the application end points like get postp put delete and then the sttp response will be sent back to the client so now you can imagine you can imagine how the request is being processed by the different middlewares and if you notice these middle wees are like very common functionality for which a developer has to write the code in I think almost all application so basically whenever a request will come you will log the request details then you will authenticate or validate the request and then you will do some codes for security so these are very common functionalities in every application these are not business logic it is for security validation all these purpose okay and yes yes I will explain them in detail in upcoming question okay okay so one more thing here uh together all these middle wees are also called request pipeline because all requests are coming from the front end and have to pass through this Pipeline and then they will reach the uh methods the business the get post real methods great that is the whole story of the middle Weare and here is a very easy to understand but the complete definition of the middle wear a middle wear in EXP press is a function that handles HTTP request performs some operations on that request and passes the control to the next middleware all right now in upcoming questions we will explore the middleware implementation how to implement middleware in Express see there are four simple steps for creating and using middle Weare in Express okay let me show you first initialize an express application like this you already know second Define a middleware function my middleware like this name can be anything as you can see this middle Weare function accepts three parameters request response and next is a call back function I will explain you so this means after receiving the request the inside logic of the middleware will be executed and then the next function that is received as the parameter will be called okay now listen carefully this next function is responsible for calling the next middle Fair function okay all right until now we have just defined the middleware here same like a function okay but we have not yet called it right so to execute or call the middle Fair function we can use the use method of the express application server and there pass the above middle where name as an argument okay so now when request will see this code then the above defined middleware will be executed and after that as usual we can use the listen method of the application server so that our server can listen to the request from the UI or somewhere else that's it now if you open the browser and with this URL then you can will see the response because when app. use is executed here in code the middle wear code will be executed and from there this response do send will send this as response okay clear got it great that is how a very simple middleware is first defined and then executed by using the app. use method and all the steps I have written here for later ref so that there will not be any confusion although I have explained all these four steps already what is the purpose of the app.use function in Express very short question but very important one and you already know the 90% of the answer I like this after creating or defining the middleware the app do app. use method of application server is used to execute the middleware globally remember globally and for all request remember for all request okay the same thing is written here globally you understand use method will execute this middleware for all kinds of request uh like request method like getput post delete all methods so that's why we are calling it globally now yes there are other methods also apart from app.use which can like only specific methods they will execute and they will not then the middle wear will be executed only with a specific kind of methods not with others and that I will explain you in upcoming questions okay but now you completely know what is app. use what is the purpose of the next parameter in Express JS again I think you know 70% of the answer but now let's make it 100% because this is very important we know how to define the middle we like this right right now our question is what this next parameter or next function is doing here because we are receiving this function as the parameter above therefore it's a call back function okay you I hope you know call call back function when we receive any function as the parameter that is the call back function now remember in most applications we have more than one middleware okay so for example here we have this another middleware defined like this then first we will execute the first middle Weare by using this method now when this middleware execution is completed after that in order to send the execution to the next middleware we will call the next function at the end of the first middle bear okay and therefore then only this next middle Weare will be executed otherwise if you will not this use this next function then next middle Weare will never be executed so that then we will of course start the server and finally we will get the output like this and here you can see interview from the first middleware and happy is from the second middleware and uh also that is the explanation and here is also how I have written the answer and the simplest definition of the next call back function the next parameter is a call back function which is used to pass control to the next middleware function in the stack okay and again this next function is a inbuilt function present in the Express framework so that's why we use Express framework okay it provide so many things that even we sometimes don't know how many things like it has providing to us great that's the answer to this question how to use middleware globally for a specific route now let me explain with the help of the code here here how we Define the middleware you know now our requirement is that we want to execute the middleware only for a specific kind of URL like this middleware okay for that we can use this app.use method only okay but this time as a first argument we will pass the specific Ur and then in the second argument we will pass the middleware name so what it means it means this middleware will only executed if the request URL will contain this string that's the purpose finally we will start listening to the request and then you if you will open the browser here if you pass the URL with this example string in it okay then only you will be able to see the middle we result if you remove the example string from the URL then middle Weare will not execute and therefore you will not see anything here in the browser in that case Okay so that's the answer to this question and same is written here for later reference purpose what is the request pipeline in Express here you remember the middleware execution inside the rest API right you remember as you can see this request is passing through each middleware and finally reaching the applic end points so all these middleware exe execution are one by one and together and therefore they are called a request pipeline also sometimes okay so because it's like a pipe okay because which will from which the request will pass right great here I have also written a very simple definition the request by planis Express is a series of middleware functions that handle HTTP request incoming sttp request and pass the control to the next function that's the answer to the question congrats on completing the last chapter now before starting the next chapter here is one piece of advice for interviews which I repeat again and again remember never answer the questions in just one line try to explain the answers with definitions and example and most importantly say that in my own last project I used middle wees for logging purpose authentification purpose etc etc okay so this will show the interviewer that you have really used the concepts in your own project and that is very important okay so now in this chapter we will see the types of middleware here are the questions and most importantly we will explore when to use which type of middleware in our application in which situation okay so let's start with the first question what are the types of middle wees in expressjs yes there are multiple types of middle Wares and here I will just share their names and in upcoming questions I will explain them one by one the first type is application Level middleware second type is router level middleware then we have error handling middleware s and then buil-in middle Wares and the last is third party middle Wares in upcoming questions we will explore these middle Wares and most importantly we will see when to use which type of middleware in which type of situation in your application that is very important so be ready for the journey okay what is the difference between application Level and rotter level middleware root level middleware sorry you already know 90% of the answer to this question here is the code for application Level middleware this is the middleware imple implementation I already explained and this is application Level middleware okay because it will executed it be executed globally for all incoming request and for all urls in your application the name is also like application Level because it is common for all the requests coming to your application okay that's why application Level now let's see the code example of root level middleware here is our middleware and it is root level middleware because it will execute only for this specific URL or you can for this specific root same thing okay and not for others not execute so I already explained this also right but why I am covering bring this separately because sometimes we know the answer and the con concept but we know the different we don't know the different terms and names like root level uh middleware application Level medial so these terms can confuse us and I want to make sure we do not uh be confused okay so if we know the answer we should know it completely all right the same has been mentioned here also so that if anyone wants to revise from the book later then it will be very much pretty easy for them what is error handling middleware and how to implement it first of all we what is uh error handling error handling means uh when the users are using your application then in case of any error the developer must have written some code in the application to capture the error capture and then properly log the error details okay so that the later developer can analyze the error and can fix it okay that is error handling very high level idea and also in case of any error you have to send a suitable message to the user and client also that is also error handling man okay otherwise the random technical error Pages can confuse your non-technical users now to implement error handling now listen carefully suppose you have this middle Weare code here we are directly calling middleware inside this app.use method okay and here I'm intentionally and purposely throwing this error I'm okay because I just want to show you the code to how to handle this error later of course in real applications you will not generate an error like this it will come from the user side okay now to handle this error in the next middleware I will use this additional air parameter err parameter along with the request response and next parameters that is the important thing this error parameter is an error object and this will only capture the errors from the above middle bees got it so the F first I will log the error details by logging the complete stack race of the error and then I'm sending a proper user friendly message to the user with a proper status scow because that is the purpose of error handling right now obviously you will write here if else condition here uh if this error object is null then you will execute the normal middle Vare code but if error object is not null meaning there is some error if then only you will run this code okay uh and then after that you can simply start the server like this and uh now if you test the code run the application open the browser enter this URL and as a user you will see the proper error message uh which was our first requirement and because I am I initially I intentionally throw this error right that's why we are seeing the error here and in the console console also you will see the proper error stack TR stack Trace which you can log somewhere in some text file and then later as a developer you can do the analysis on that and fix the error great that is the whole process and finally here I have summarized what is error handling middleware and then how to implement error handling middleware by using the error object parameter both I already explained uh written here so that revision from the book will be very easy quick and fast during the last minute preparation just before the interviews this is like a scenario based question so if you have five middle wees then in which middle wear you will do the error handling uh these kinds of in questions are very much important for interview purpose okay they will they will try to confuse you so like this is the code and we have five middle Bears then you should handle the error object in the last and fifth middle bear okay now listen carefully because when an error occurs for example an error occur in inside the second middleware okay then express.js will directly jump and execute the middleware which has an error handling code got it the third and fourth middle wees will not be executed okay therefore always handle the errors only only and only in the last middleware because your Express will search for the middleware okay so suppose if you have handled the error in this fourth so in case the error will occur on Fifth middle we then what will happen then you will miss that error okay so that's why handle the error in the last middle we great that is the answer to this question and the same has been written here also for later revision purpose what is built-in middleware how to serve static files from the expressjs so yes sometimes we have to serve static files like images directly from our express application right and for that the answer is simple like this code we can call the static function of the Express framework inside the app.use method now you already know we call middleware inside this app.use method right here the static function is a middleware only okay but this middleware is an inbuilt function provided by the Express framework you do not have to find this middleware write the code for this middleware function because it is already present with the Express framework okay so like this uh there are many other in inbuilt middlewares also provided uh by the Express framework to make the developers work simpler and great now all your static files inside the public folder will be available directly when I say directly directly means we do not normally need any any authentication process for the static files okay uh and then in the code we can call the rest of the middlewares and then start the server like this in the browser if you will enter the URL of the static file and do not enter public here in the URL and you will get the static file directly access to you this is the role of the static middleware which is an example of the built-in built in in in built or built in same thing okay middleware remember to put the public folder and this code file under the same folder otherwise this link will not work if you are trying to code this this what I have coded here great that is the answer to this question and the same is written here for later revision what are third party middle bear give some examples okay so we as developers can create our own middle wees right then we can use the inbuilt middle wees from the Express framework okay then we can also have this third party middle wees third party because these middle wees are not part of the expreme Frameworks and we are also not creating them as a developer basically externally some from Community some developer will create these okay and we can use them okay for that first we have to install them by using this npm install command uh so see all these helmet body parts compression these are very very popular third party middle wees maybe later in question I will discuss them but now you know what is third party middlewares provided from the community externally we have to install them built-in middlewares we do not install them okay okay so then in the code we have to import them like this then we we have we can call them inside dab. use method very simple and here in comments I have also written about the use of these specific third type third party middlewares for example this helmet uh is used for setting HTTP security headers okay then this body parts middleware basically the request which are coming it will pars them okay it will crawl them uh check what are the contents of the request okay then this compression middleware for compressing the sttp responses so this is used for the performance improving the performance basically the responses going from your applications we will compress them as much as possible then their size will be less and that will improve the performance okay great these are just examples and there are many more which you can use in your application as per your application requirements right okay now you know what are third party medal we and how to implement them finally here I have written the simplest definition of the uh this third party midle we then I written common purpose of them what are their purpose and finally some examples also I hope this information is enough to understand the third party middlewares right can you summarize all the types of middle wees yeah this is just like a revision question and very theoretical answer very short format I will provide you if you understand all the previous questions the types of middle wees then here is like the on line definition for all those middle wees okay and here it is uh I think you already know them but why I'm writing it down here to recollect all your memories all the previous learnings because sometimes we have very less less time to revise just check out this question and you are ready but of course you have that prior Foundation okay that's the answer to this question what are the advantages of using middle wees in Express JS very important question and the good news is you already know the answer but I'm writing it down here because sometimes we know the answer but we don't know the right words to how to explain okay so that's why you will will learn the words here not answer you already know okay First Advantage is modularity you know yeah this is the word okay yes middle bees are like the small function or you can say the modules that do a specific task right so modular okay modularity I hope you understand like break down your application into a smaller smaller functions which you can reuse reuse all over your applications so middleware support modularity Second Advantage is reusability yes you can reuse the same middle middleware at multiple places which makes your application code easier to maintain thir ad third Advantage is improve request handling meaning with the help of the middleware you can easily handle requests and response in a better way okay remember in a better way for example you can use middleware to validate the content of the incoming request just an example it is fourth is flexible control flow meaning you can decide which middleware will be applied to which type of root which type of request so that's completely flexible okay so that is the flexibility you have last Advantage is third party middle Wares yes you can use the outside written code outside middleware in order to implement different types of uh features or you can simplify your application right great that is the there are many more but I think five is enough if you can name two or three explain you can advantages that is enough okay and yes I have written all the description here I already explained them but to revise you need not to hear me again and again okay when you are revising just a quick glimpse of this question can help you in the last minute preparation just before the interviews great after middle Weare the other most important feature of the Express framework is rooting rooting is a very important concept for example to achieve success in your career you have to follow the right route or path right so in that route you have to give interviews join right companies learn Technologies okay so similarly our express application manages the roots of incoming request and that is called rooting and here are the questions which we will explore so let's start with the first question what is rooting in Express let's quickly understand with the help of a diagram we already know we have a front end which can be an angular react view Etc right and then we have a rest API which is in our case is in Express and node now the HTTP request will come from the front end and inside the rest API it will first hit the middle wear right now suppose our application is an e-commerce application and for that we have controllers like orders products payments ET ET anything related to e-commerce okay then inside the controllers we have these get orders post orders various methods right now the question is how it will be decided which kind of request will go to which controller method for that we have a rooting like this after the middle wear now listen carefully what rooting will do in the case of a URL with orders the rooting will redirect it to the order controller and if the method in the request is get then it will execute the get orders method of the orders controller only so in the case of products or payments in the URL the request will be redirect to the products or payments controller and finally the response will be sent back to the front end okay so that is the role of rooting here is the simplest and the easy to remember definition rooting in Express is the process of directing incoming HTTP request to the appropriate Handler functions based on the request method and the URL path so this request method and URL path are the part of the request only great in upcoming questions we will explore more and more about rooting okay so get ready for the Fantastic Journey what is the difference between middleware and rooting in Express sometimes we get confused by these two things but now let's make it very clear first difference is middleware is a function whereas rooting is a process okay very simple second difference is and you already know middle fear functions can access the request and response object and then they can like either perform some action like authorization logging and then after that either they can end the request response cycle also or middle Weare can also call the next middle Weare function okay so that is about middleware so in short basically middleware will perform some logic okay whereas rooting is the process of directing incoming HTTP request to the appropriate Handler get post for delete okay so that means a routing only directs the request rooting doeses not perform any logic or on request okay so that's the difference how to implement routing how do you define roots in express the answer is hidden in the question itself we can Implement rooting by defining the roots in your application that is the answer let me explain with the help of the codes first how to define the roots first like this we can create an instance of the express application then we can define a a root for handling the get request from the client okay here we will use the app. method name method can be get postp put to delete I'm calling it Jour method okay so this is simply how we Define the root nothing special now for it means now for every get request this inside code will be executed okay but in real applications we redirect to it to the controllers that I will show in upcoming question for now you can see this method will accept two parameters first is the root path and in this case it is slash mean it is means it's the root path okay root the second is the call back function now suppose the request is just dot dot dot oh sorry uh www. example.com with the get method in the request okay URL and the method is there then this defined root will be executed with the second argument call back function okay and here is the second function we also called this this second function we also called root Handler similarly we can Define the uh roots for other methods like post put delete and in if the URL is /login that means this defined route will execute only when the URL we will have this s uh login in the URL okay and the post method the request method is the post only for that only this will execute great this is how we can Define the roots to implement simple rooting finally we can start the server open the browser you can see here for the root URL we are getting the get method request response as I said in and as I said in application we do not send the response like this we will first redirect the request to the controller method and then the response will come that I will show an upcoming question but now you know how to define the roots and here I have also written the same thing which I already explained it can help you in the last minute revision just before the interviews okay how to handle rooting in Express real applications yes in real application rooting approach is slightly different there are basically five steps uh first step is to import the express application second Define and execute our middleware for authentication logging Etc multiple purposes third we import the controllers that we have in our application like this okay we will use rooting to redirect to these controllers based on the incoming URL and request L and the request methods only okay so fourth step is to define the roots like this here you can see that based on the URL only request will be redirect to this get order by ID functions of order controller okay and the same thing will happen for the next two Roots also and fifth step is just start the server like this as usual and your rooting is ready so this is an idea and a basic understanding of how we can handle the rootings in real real real applications okay and the same steps I have written here for later reference what are root handlers I'm sure you already know the answer but I'm covering it separately so that you do not miss anything while revising Okay small small things matters so we already about this code aware about this code for defining the roots for handling get request right now listen carefully here the second argument which is a call back function is the root Handler only very simple answer and you already know that this root Handler function is used to process the request and generate the response okay whole logic will can be written here the same thing I have written here also for your later revision okay what are root parameters in Express again a very short and simple question here is the code here we have defined the root with a root parameter this user ID is the root parameter so basically it's a dynamic value that the user uh can send with the request URL okay and then you can access this root parameter by using this request. perms object okay here then we can use this user ID as per our application need great that is the whole and short idea of the root parameter same thing is written here for the later reference great and here is the second list of rooting questions the list is slightly long but the answers are very simple and short and remember one thing without rooting your route to becoming a node developer will never be completed wow all right so let's start with the first question of this chapter and clear your rout to success get success in interviews what are rotter object and router methods and how to implement them see router method is used for rooting only but in a slightly more advanced way okay uh so first let let me show you the code implementation okay there are two steps first we will implement the rter method and then we will use the rter method okay so for to implement rotter method first we will create the express application then we will use the express. Rooter Rooter method which will written a rooter object like this it's very important this Rooter object is the main player because then we will use the get method of this Rooter object only to Define the root like this okay so this rter object. get postp put delete is called the Rooter method got my point and here the first parameter is the root URL and the second parameter is the root Handler and you can also set one middle wear parameter here up to your application need now if you remember this is almost same like that app.get rooting technique right almost same so then why we need this router object and this router method technique what's the need need now listen carefully we need this because then we can export our rotter like this okay so like we export modules now we can export rotter objects also now we can use this router in some other file for example app.js and many other files and that is the benefit of using the rotter methods and objects okay how to use to like that we will first import the router that we have created and then we will Mount the router object using the app.use method okay mounting means basically our router will only run for this URL this a/ API URL uh so which router we created will only run for this uh for example SL API SL authorization yeah so that is the um mounting finally we can start the application and that's it finally here I have written the simple definition of the Rooter object and roter Method the Rooter object is a mini version of the express application which is used for handling Roots only and Rooter method are functions provided by the Rooter object only to define the roots for different methods like get post delete Etc okay so that's it and I will also explain like why we prefer router methods rather than app. get postp put delete okay in upcoming question what are the types of rter methods you already know the answer here are the four types of router methods router. get router. poost port and delete very simple and clear post will work with only post request will have only post method get will work with the get methods and simple reasoning right what is the difference between app.get and roter doget methods so here I will conclude conclude the differences between these two it will not take much time let's quickly compare with the help of the code see this is how we Define the rooting by directly using the app.get method right and this is how we Define the routing using sorry root a.get method okay now let's see the differences one by one first difference is as you can see app.get method is used to define Roots directly on the application object directly okay whereas the Rooter doget method is used to define the roots on a rooter object okay so the root it's not yet implemented on that we will export it and there we will U apply on an application object okay that is the one difference second difference is that Roots defined using app.get are automatically mounted on the root path okay so if uh they will be automatic whereas Roots uh defined using Ro a DOT are not automatically mounted meaning meaning after defining the roots like this you must export them and then use the app.use method only to mount them or to use them you can say okay finally the main difference and also can be an important question is why this direct Rooter doget method in sorry indirect Rooter doget method is more popular the reason is if you defined Roots using app.get then you cannot reuse the RO roots that root in other parts of your application Okay so if you have multiple roots in your application which of course you will have if you have a working in a big application then directly using app.get will look very un unorganized and like unstructured code okay but whereas if you define Roots separately using root Rooter doget method and then you can create separate root files for separating you separate like for different module different rooting files you will create by using the rotter objects okay and then you can export them and then you can also reuse these roots in multiple places of your application so this is like modularity and that will also make your application more organized and more structured with reusable routers remember reusable routers you will get with router dot methods and that is the reason why in big applications where we have have multiple Roots we use Rooter methods only not the Rooter app.get that's the answer to this question also the three differences I have explained are written here so that later anyone can easily revise just before their interviews okay what is express. rter in express.js you already know the answer but I'm just putting it here so that while revising the list of the question you do not miss the Small Things yeah and that's I always do so here is the code for defining rooting for the rter method and the answer is simple express. Rooter is a class in Express CHS that returns a new router object okay share a real application use of rooting and the answer is here rooting is used for authenticating request based on the token available in request header so let's quickly say this code first create the roter object like this and then Define the middleware function for authentication the request authenticating the request and then use the router method to execute the middle Weare for a specific route which is protected meaning the above middle bear will only execute if the URL or request URL string will have contain this protected word inside it okay finally you can mount the router under this/ API path and this is a very real application situation okay now if you open the browser you open this / API SL protected part so uh but your application if above don't have the authentication token that's why you are unauthorized here okay will be that will be return by the middleware okay so that's very simple and real example of the real application use of the rooting and middleware together what is root chaining in Express you know the meaning of chaining right so root chaining means you can Define multiple root handlers for a single root okay let me show you by example in this code here you can see we have two middle Wares okay now our requirement is to execute these two middle wees one by one for a single root okay got it so for that we will use root chaining concept like this first inside the root method the first parameter we will Define is the single root so this is is the single slash root is the single root and then we will Define the middle Wares one by one okay or you can also say these are root handlers so now these middle wees will execute one by one for this single Loot and that is simple root chaining and then we will of course start the server and enter the URL in the browser see the output we are getting middle wear middle wear two and then finally the root Handler so basically from above middle wees only we are getting this and this is output is also there at the bottom and root chaining example is inside from the this root method okay and basically this why we this how this Con concept help is root chaining is a process what we have learned is defining multiple root handlers for a single root right what it is helping how it is helping is basically modularity organizing code improving readability separating concerns very heavy words okay but in short I will say that suppose you have multiple middle wees you want to execute for one route so that it will maintain this root chaining okay and one more thing instead of app.get we normally prefer router doget obviously I explained earlier for root chaining but just to make this code shorter here I use app.get for simple explanation okay only otherwise I have to create two files so great that's the story and I have written here finally the root chaining definition and how it helps uh that also written here what is root nesting in Express in real applications you can have multiple multiple Ro Roots right for example like this one route will go to the example.com user root now and another is going to the products route now to organize the code in a better way all child of this user like profile and others are grouped or nested inside the users rout okay and all Childs of uh roots of products like features and ratings will be nested inside the product suit so this kind of nesting and grouping is called root nesting uh the definition is root nesting organizes code Roots hierarchically by grouping related Roots under a common URL prefix and its Advantage is uh it allows you to create more modular and structure code making your code base easier to manage and maintain all right this is is the answer but uh obviously we want to look at the code that we will do in the next question I will show you the implementation of root nesting okay how to implement root nesting in Express Now quickly see let's quickly see the Practical implementation of root nesting examples see we can Define the users and their nested Roots like profiles and others like this in one file okay so here we uh users and their Roots only okay the file name is user router.js then we can Define the products related roots in another file which is products router.js now here obviously due to space issue uh space I have not written the complete code but that is same like in the I did in this user Roots above almost it is same and sorry for this smaller image also I hope you can see it properly right great now we will m count these roots see we are already exporting these rout uh Roots therefore we can use them in our main application file app app.js like this here first we are importing the root roots and then we are mounting all the user Roots at this user power roote and similarly all products to this/ product route that's it this is the example this is how we are separating the files we are modul iing the project for more and more routing we can handle now different SL user SL product/ order different files we can create right and you can observe since we are using this uh rotter methods uh this is one benefit like app.get method we are not using because then organizing will be different router get will work here okay so that's why also we prefer router methods because in real application we have these kinds of many roots that is the answer to this question all right after rooting we have the shortest chapter of this course and that is the template engine in Express also this is the last chapter of our Express Milestone and here are the three questions very simple let's quickly start and finish it what are template engines in Express from the name only you can understand that template engine purpose is to process the templates right okay so see mostly our HTML is present on the client side UI server right for example with react or angular application and from the node rest API we mainly process the business logic and the data only no HTML right but sometimes sometimes we can send the complete HTML document also from the node application and in those scenarios in case of like server side rendering scenarios uh we can do that with the help of this template engines so in those cases we have the data like this and then we can also have these many HTML templates in our express application these are templates okay the HTML templates uh meaning is only static information is here like hello is the static thing but data will come from the above data okay now listen carefully our template engine job is to combine the data and the HTML template to create a full HTML document like this that is the idea and here I have written the full and easy to understand definition also template engines are labratories that enable developers to generate Dynamic HTML content by combining the static HTML template with the data okay in the upcoming question I will show you the uh some more information about these engines okay name some template engine libraries as I said template engine are libraries and we have many template engine libraries which can generate the dynamic HTML by combining data with the HTML templates okay for that we need D libraries here are some ejs that that is embedded JavaScript very popular then handlebars then pug is there mustach is there njx is there okay now you do not have to remember all these just the just the idea of one or two is good enough okay and even I don't have the idea of all of this uh out of these the top one ejs is the most popular so we will see the implementation of that in the upcoming question okay how to implement EEG S templating engine in express application now I will show you the complete implementation of EGS template in just very few five simple steps first step is to install ejs with this command npm install EGS because EGS is a third party module okay see how simple is the step is okay so okay so second step is to create the folder views and create your HTML template which name is index.js inside this folder and then here is the code of this index.js file okay so basically you can see this is simple HTML template and here this data this title will come from the express application server which I will show you now the third step is to create a server.js file and here we will use the uh you will we will use use set function of the express application to set the view engine to EGS so basically we are setting the view engine view engine to EGS okay there can be some other engine also but now we are implementing EGS only okay and view engine and temp template engine are same thing okay now here we are setting it because uh okay so now that's already done actually now fourth step is setting the views directory like this uh meaning the view engine or tempate engine will look for the HTML template inside the views folder of your project which you can create uh which you created in there that in Second Step okay great for that we have taken the help of this path module also path module uh I already explain I or I will explain what is it in the Express framework it's a part of and finally the last and fifth step is to use the render method of the response like this to combine to combine the HTML inside the index s template with the title application data great for Simplicity right now I hardcoded this data but in real application of course it will come from some database or from some other uh sources okay the data and that's all all uh how to implement and the summary is first we are using the set method of the express application for setting the ejs detail uh and then finally we are using the application. getet method to render the dynamic HT data with the dynamic data with the HTML now simply start the application with this code and run the application open the browser and you will find the result in the browser like this here the first line is the dynamic data coming from the application and the second line is the static HTML coming from the HTML template because both are mixed right by the template engine and that is how the dynamic HTML is generated now in interviews normally interviewers will not ask you the complete implementation obviously but you know if you know the implementation of the things then you have have the confidence and you can better explain the things to anyone right like confidence comes and finally I have written in next Slide the five steps also so that you can easily revise them later congratulations on completing the Express framework chapter and reaching here here is our next Milestone topic rest API and all its chapters now remember one thing mostly nodejs is used to create rest apis only okay so in these mil in this Milestone we will cover questions on chapters rest API Basics sttp methods status codes codes serialization deserialization authentication authorization JWT okay and here is the first chapter here we will cover these arrest API and very basic questions on rest API okay so let's start with the first question what are rest and restful API let's quickly understand with the help of a diagram which you might already know but let's revise quickly a user first open the browser and enters the application URL right then request will be sent to the UI server which is mostly created in react angular using CSS HTML JavaScript okay then the UI server can process the static HTML by itself but for the dynamic data it will send the request to the server side API and this rest API can be created in nodejs java.net ETC then this API will uh fetch the data from the database and send the response in Json format back to the UI server okay and the UI server will process it into HTML and send it to the user browser okay so that's the process and now you know the this server side application we call the rest API and sometimes backend application also so what is the meaning of rest here here rest which stands for representational State transfer it's an architectural style for Designing the network applications or you can say that rest is like a guidelin set of guidelines for creating the apis okay now here the meaning of this representational state transfer means transferring of data accurately in a network that's the like meaning 99% synonymous okay so finally what is restful API then so a restful API is a service that follows the rest principles or guidelines okay here it is written rest API and restful API are the same things okay great now you know what are what is rest and now we you want to know what are the rest guidelines right that I will cover in upcoming question what are the HTTP request and HTTP response structure in the UI and rest API I know I know it's a very basic question but sometimes we start exploring the advanced things without remembering the basics so I don't want to take that chance so let's quickly see the structure of the HTTP request and response first okay so here is our basic flow between the user browser UI server and rest API you already know this now first time when the HTTP request will go from user to browser uh from sorry from browser to UI then it will will be something like this here you can see we have this an action post and URL at the top then the type of the request we have which is HTTP then we have the UI server address where the request will go okay then we have the request body and the user is trying to do some sign up in this website therefore sending their username and password in the request body okay finally we can also have the request header and content type here also so request header contains some additional information about the reest okay and content type is like content format uh for example here content type is text great that is the idea when we send the request from UI server to or sorry from uh from our browser to UI server now based on the request received the UI server can do some operations by itself for example sorting filtering static data or images uh sending to the browser that UI server can do but for the dynamic and the additional data the UI server will forward the same request to the rest API okay and here in the request everything will be same uh same as the previous HTTP request but only this address can be different will be different of course it will be different it this time it will be the API server address because this time request is going to the API server now right now the rest API will fetch the data from the database or somewhere and it will responds back with this response okay and here we have the status code which is like the request is failed or passed like that then content type will be there which is content format you can say which is Json in this case and then the content itself will be there the whole content like the Json format in the Json format okay now this UI server will receive this Json and will convert the data uh Json into HTML elements and finally send the HTML content to the browser like this and browser will of course display to it to the user great I think that is the whole flow and it can be a good revision if you are doing it again and otherwise it can be a very very good learning for understanding the complete flow okay now you know what is the difference between an HT HTTP request from the user to the UI and then from the UI server to the rest API and what is the difference between especially between the response from the rest API to UI and from response from UI to the browser so now you know that differences right now in the next slide I have written some differences very minimal and simple theory about sttp sttp request and response I already explained but some pointers can help us in better revision right that's why I have written it here what are the top five rest guidelines and the advantages of them so whenever we create any restful service you must follow some rest guidelines then only your service will be called restful service okay let's explore five guidelines and let's understand them the first and the most important one is the separation of client and server this is first guideline it means the implementation of the client the UI and the implementation of the server API must be done independently okay and as you know now we create uh separate applications for the client UI and separate for the API in node or something but earlier in earlier days we used to create single application that had both UI and the server in one single monolithic application so that single application was the violation of this guideline okay but yes now we mostly keep the UI and API separately okay that is separation of client and server the advantage is both client and server application uh if they are independent then the maintenance of them will be very very easy because they are separate right okay and also for a single API server you can create multiple UI applications right like Android application for single API Android iOS browser based application web application so that is also one advantage the second rest guideline is that apis must be stateless meaning the server server API server will not store anything in it about the HTTP request so the client will send some HTTP request but server will just respond something but will not store anything about the request okay so that also means that API will treat every request as a new and fresh request right right because it does not have any information again in Old applications we store sessions on the server side but that was again the against the rest guidelines okay the advantage of not storing anything on the server is that server is then very lightweight and simplified also because it is not overloading itself with the state management problems okay those are big problems third important guideline is a uniform interface uniform interface means one URL of API must represent a unique service of the API okay for for example suppose your API is an e-commerce application like abc.com um it's a e-commerce so abc.com API shoes this URL must be unique and uniform it it it must get the shoes list from your website by okay so now in your API you should not anytime redirect this URL for getting the shirts or something else so that is the meaning of uniform interface the advantage is that these standardized URLs make API resources easy to understand and easy to use also because of course then by looking at the URL only you can easily identify that what service it will provide right okay so now the fourth guideline is cachable sometimes your API receives same requests multiple times millions of times same request now the response of these kind of request must be cachable meaning caching is a different concept but if you know little bit about it so it will improve the response Speed and Performance will be very much increased if the frequently access data will be cached okay uh okay and then the fifth guideline is layered system uh your API project must follow some layered system like MVC architecture the advantage is that layered is a very good for modular design because because in modular design we divide applications in separate separate modules right and those modules can be then handled independently without impacting each other okay so that is eventually the benefit of modular design all right uh yes there are some more guidelines but I think these are the top five and out of these you should remember three to four guidelines and uh whatever I have explained also so I have written here those points with the advantages here uh so that your last minute preparation just before the interviews will be very very fast and quick okay what is the difference between rest API and soap API some years ago before rest apis soap apis were very popular okay now let's quickly see the differences between them based on the features first is architecture based difference remember remember rest is an architectural style okay whereas soap is a protocol simple object access protocol it's not an architectural style second difference is rest API uses HTTP or https protocol only whereas so API can use various protocols like HTTP SM SMTP Etc next is rest API uses lightweight formats like Json XML only whereas soap API typically uses XML okay then next is rest API are stateless you know it whereas so API can be State full or state less also depends next is rest API relies on HTTP status codes like 200 2011 Etc whereas soap API Define its own fault Mone mechanism okay every soap API will can Define its own different different so that's a problem actually now I'm going the last difference between them because of which soap API are very popular nowadays sorry rest API are very popular nowadays and that is rest API are generally lightweight and faster whereas soap API can be slower due to XML processing okay all right these were some differences between these two what congrats on completing the last chapter I always repeat one thing again and again if you have the interview cracking skill if you have then you will never be scared of any interview any recession bad appraisals switching jobs or anything else okay and this skill of interview cracking can be learned by doing three things first by learning technology obvious second by giving more and more interviews okay and third is and most important thing is by having a never give up attitude for any number of rejections okay all right now here are the questions on sttp methods the status codes from the rest API very easy and simple so let's start and finish them quickly rar HTTP verbs and HTTP methods we already know this flow from the browser to UI server to API server to database right already know now whenever a request goes from U UI server to rest API it also contain the HTTP verbs and here are those HTTP verbs or HTTP methods also we they are both same things these get post put delete patch methods these are HTTP verbs now basically along with the URL only this type of action will go okay so for example the request should get data from the API or post and submit data to the API for that we will use these sttp matters I am telling you like in which scenarios okay so by looking at these verbs name you can easily identify their purpose also right and uh here is a very simple definition of sttp methods HTTP methods also known as HTTP verbs are a set of function that a client can take on a resource in the upcoming question I will show you the role of these HTTP methods with an example also okay what are the get postp put and delete HTTP methods let's quickly see all these methods with the definitions and the examples the first one is get method method which is used to retrieve data from a specified resource for example if this is the HTTP request URL and HTTP request method is get here then a list of all the users will be retrieved from the rest API as a response remember in this case users are the resource okay also with this get method you can retrieve the details of a single users also by passing this user ID in the URL like this then the second me is the post method which is used to submit data which has to be processed for example this is the same URL as of above the get request right but this time the request method will post data instead of get and also in the request body there will be the data of the user sent by the UI server okay in a so so basically in a get method request the request body can be empty or it's optional but in post you will send some data to the server Okay the third HTTP method is put which is used to update a resource or create a new resource if it does not exist for example if this is the request URL and the request request method is put here it means the you the the user of this ID is already present in the database and now you will you are basically replacing that existing user detail with the details which are you now sending in the request body with the port request okay got it and yes if the uh user is not there then it will create the new user okay finally we have the delete method and as its name suggest it will remove a user resource user for example if this is the user ID 123 then uh this will be deleted from the user resources or from the database and here you request body is optional great this is the idea of the top for HTTP methods and if you look closely here then the URL can be same okay you can see the URL can be same of the two request but the action method uh is different so always the action will be taken based on the URL plus action method combined okay URL alone can't decide the action okay what is the difference between the put and the patch methods now there is one more HTTP method and that is patch method I'm covering it separately because it is slightly confusing with the put method which confusion I will clear now first thing is what is the similarity between put and Patch okay and here it is both put and Patch methods are used to update a resource by replacing the resource with the new data provided in the request it's I think I hope it's clear to you already now what is the difference let me explain with the help of the this code for example this is your put request URL and put request body okay this request body received from the client should have all the details all the details of the user resource because put will do a complete resource replacement complete okay now listen carefully here is the patch URL and Patch request body here the URL is same but in patch request body the client will only send those fields that needs modification not all the fields okay for example in this case we only want to update the email and age of this user 123 so this will not impact other fields of the user it's not a complete update okay it's just a partial update great in short part patch method as I said will do a partial resource update and not will do the complete resource update like the put method and that's the answer and the same difference I have written here also so that your last minute revision just before the interviews will be very quick and fast explain the concept of item poent in restful API and in my in this this is not a very important question but some students says that they have been asked in interview so let's understand it uh IDM poent is a sorry for my pronunciation it's poent or item poent I don't know so item poent is a concept that guarantees that performing the same operation multiple times will always give the same output same response same result okay so the word is hard but the purpose meaning is easy okay for example see here see if you send this get method request 100 times again and again the result will always be the same okay you will get the response with the 100 uh the users list right same result now similar to get we have the put and delete methods also those are also it important okay now put put because if you send to update the same request body again and again so every time the same replacement will happen and the result will be same so that is item poent now what is non- item poent methods for example this post method because if you send multiple post request with the same request body then each time a new user new user with a new user ID will be created in the database right that means the result has been changed it is impacted and it every time it will impact it's different okay great that is the explanation of this concept and the same thing is written here also which I already explained right what is the role of status Cotes in restful apis here is the simple answer status codes are used to convey the results of a client request so for example whenever a request is sent from the client to the API server that request on API server can be success fail unauthorized etc etc right then to inform the result to the client uh rest API send the status codes okay so suppose client send one request to the API and API send a response with a status code starting like this this one that means the response is just informational nothing important here okay it's informational then if the response status code API starts with two then that means client request was a success on the server API server if a status code response is starting with three that means client request was redirected somewhere else okay again it is not so important and it's very very less used then if the response State CES starts with four or five that means client request was rejected and or you can say fail okay great now here are all the status codes also uh out of all these codes the most important one is 200 which means uh the request was successful and there can be some content also in the response from the API server okay uh second important one is 204 which means again the request is successful but in the response there is no content from the API server to the client okay the next important status I will say is 400 which means client request has some problems okay client request has some problems that I think most probably UI developers will fix because they are sending the request right for example incorrect uh request format or incorrect data type they are sending in the request from the UI okay 41 error means user or request is not at all authorized okay it is related to authorization 403 three error means user is authorized request is authorized but it is may be forbidden for some other resource like for some resource of API it is authorized but not for others for them 43 errors will be sent then 404 means the resource the request is looking for is actually not found it is not present in the rest API maybe uh the client is using the wrong resource name they are asking for okay this is about the errors then we have 500 status code which means there is some error but that is not due to client request uh request is fine but maybe there is some connection internet issue the server is down API server is down so this is the difference between these 400 and 500 also in 400 cases failure mostly because of client request in 00 cases failure is because of API servers maybe not client request great dat is the I think the most complete answer of this question right it and congrats on finishing the last chapter keep going keep going and never ever give up on your goals in this chapter we will cover these questions about codes serialization der serialization and some other topics of the rest API maybe you already familiar with some of these questions but still I recommend that a onetime revision is very important to gain more confidence maybe maybe maybe you will get few more pointers that you can use in your interviews okay and if in case any question is too easy for you then just increase the playback speed of the video okay so let's start with the first question what is cod in restful apis very important question and asked in many interviews let's explore it the first very important thing to remember is that course is a security feature provided by the web browsers like Chrome Edge Etc and as per this security feature suppose you are a user and you open this website interview.com now from inside this website you want to access the different pages or components of this same website like this in this case you will receive the data smoothly and without any problems okay but but but if you try to access the data of the different website like xyz.com then by default course policy of the browser will restrict and will not allow this okay this is course which stands for cross origin or origin resource sharing which means web pages from Cross origin websites meaning from different websites or domain cannot share resources meaning cannot share data okay all right so similar to this one case we have three more cases where the course will not allow the sharing of the data for example in this second case you want to get the response from a subdomain subdomain like api. before interiew happy.com okay that is sub subdomain in this case also by default course will not allow resource sharing third case is when the domain or website name is same but you are requesting from HTTP but the sender is https then also course will restrict data sharing and the last case is if the port number is different then also course will restrict uh remember this is the default behavior of course restrictions but yes sometimes as a developer we have to allow allow the data sharing between different domains right in those cases we have to suppress and remove this course security and our API code which I will show you in upcoming question finally here I have written the simplest definition of course which I already explained but uh writing it here so that your last minute preparation just before the interviews will be very quick and fast how to remove course restriction on restful API to remove course restriction we have to write some code in the API okay first we have to import the course middleware like this okay and then we have to enable this course middleware for all the roots by using this app.use method here we are passing this course method as the parameter and as a result now any website with any domain name can access the data from your API okay now if you don't use this course then website will not able to fetch the data from API by default okay so in short now we have removed the course restrictions for all the domains now suppose you want to configure course uh meaning you want to allow some domains and disallow some other domains so for that you can also configure the configure the course policy like this here in the parameter of the course middleware you can configure the domain website name for which course restrictions will be removed removed remember you can mention here so exam for examp this example.com website only only can access the data from this API but other website the course restrictions will be there okay then as usual write your rooting code and finally start the server that's the like the complete implementation and that's the answer for removing course restriction and here is the on line answer course restrictions can be removed by enabling the course middleware in application that's it what are serialization and deserialization every developer must know these Concepts let me show you the example here suppose you have two rest apis and you want to pass data from rest API 1 to rest API 2 for this we can use serialization and deserialization concept okay first inside rest API 1 we will convert the data object into the Json format and this processing of converting the object into any other format Json bytes Etc is called serialization then we will send this Json over the network to the rest API 2 there we will convert this Jason back into the object and this process is called D serialization okay clear now you may ask why we are not directly passing the object also the reason is uh see some apis are created in Java some in net some in node different Technologies and every technology handle objects differently therefore first we convert object to Json uh because Json is common for every API every technology okay easy to understand actually and then we send them great that is the answer to this question and these are the simplest and easy to remember definition definitions of serialization and the serialization which can help you in the revision from the book later what are the types of serialization very simple and short answer there are mainly three types binary serialization here you convert data or objects to the binary or bite format then there is XML serialization where you convert objects to XML format and now the most popular one is the Json serialization where you convert the objects or data structures to Json format basically so that is the short and sweet answer to this question how to serialize and deserialize in nodejs so let quickly see the code see here we have one object and then we passing that object as an argument inside this json. string five method okay so this method as a result will return the converted Json string which you can see in the output here and yes now you know the answer serialize a JavaScript object into Json format using the json. stringify method okay similarly here is the code for D calization here we are passing the above Json string inside the parts method of the Json and as a result we are getting an object that when we are printing in console so like this will be the output so the short answer is distalizing a Json string into a JavaScript object can be done by using json. pars method great now you know what methods are used for serialization and deserialization in node explain the concept of versioning in restful apis yes like we get new versions of mobile phones and softwares with the time same is the case with the apis also with time as per the new requirements we create a new version uh like this like this three version of our rest apis and then now maintaining all these old and new version is called versioning uh now now you must I might ask one question why why we are maintaining these old version one two of these rest API why just we can dispose them or destroy them see suppose we created this version three latest of our API and we did some changes here okay from version 2 API methods but the and maybe some of our API clients are not yet ready ready to accommodate those new changes of the version 3 maybe they do not have the developers budget or for any other reason okay so in that case if we maintain the previous version of the API then client can uh you know keep using the previous version one and two of the API and therefore the client application will not break because of the latest version changes in three version so like like this the client applications can use the URLs based on their requirement which version they want for different uh version different URLs can be there okay now you clear right and here is the definition versioning in the restful apis refers to the practice of maintaining mult multiple versions of an API to support backward compatibility that's it what is an API document what are the popular documentation formats all right so when we create our rest API then maybe multiple Android iOS web based UI application will start consuming our API Services okay right now in order to in inform those clients about our API methods and about the kind of request and response structures which our API accept uh we will create a document okay and that document we will share with them now so that they can easily you know make their UI applications by watching it that documents they will be knowing that okay these are the methods okay so for example this is docu example of a API document okay now you can uh the UI team can understand okay these are the methods we have to create our uh UI application as per that and the answer is an API document describes the functionality features and usage of a rest API for example this is as I said a UI document and you can easily understand the services and the the most popular documentation formats are Swagger open API also we call it then rml and API blueprint great that's the simple answer to this question what is the typical structure of a rest API project in node so basically with this question I will give you some idea about the various folders and files present in the node rest API project okay a very high level understanding so suppose you want to create an e-commerce based rest API which has products and users inside it okay just that so for that here will be the F files and folder structure see we have the node modules folder where npm packages are installed which we do not have to touch right then our main focus is on the source folder and here we have all the controllers controllers as you know are the files where you will have all your business logic like your get post put delete methods okay and uh for example this all product related methods or what we call the end points of your e-commerce uh application will be in the controllers only then we have the models which is the folder where you will have the data models or you can say the properties related to products and then the users also also then Roots folder will have the configuration for the different rooting system in your application okay so for example all Roots related to products are grouped and nested in the product Roots file and uh and okay so that's about rooting then you have a folder called utils okay so here you will be having the helper methods helper methods are methods which can be reused throughout your application uh for example an error related reusable method will be inside this error handling so validation related methods will be inside this validation helper files and these methods you can use and call and reuse in different parts of your application right the error methods uh as I said we call them helper methods also finally here is your app.js from where the request will enter into your application and uh all middleware controllers and Roots will be called from this file only okay then we have the G ignore this is the file that specified that which are the directories which has to be ignored by the Version Control like node modes SL so meaning if you do not want to submit any file to git repository from your local development environment then place that file name inside this file okay because by default all the files will be submitted to do to to the git repository all right then there is a package Jon file that contains the metadata about your project and its dependencies great that is the whole and very to the point idea of all the point files in a very simple and basic rest API project finally here is a very short description of all the files which I already explained the simplest explanations can help you in your interview preparation from the book okay that'ss on finishing the last chapter as I said earlier interviews are the best way to grow in the it and the software industry both technically and more importantly financially financially is more important because if I'm working hard then I need the better compensation for it right okay so now here we will cover these 10 questions on authentication and authorization in the rest API and remember authentication questions are very common in in in interviews so you must have a very good understanding of them so let's start with the first question of this chapter what are authentication and authorization let's clear these concept in Just 2 minutes suppose you are a student at a school now you open the website of your school and the website is asking you to login if you are a student then your school must have provided with you some username and password right now by entering those credentials here you are basically verifying your identity with the school that yes you are a student or a member of this is school then only website will allow you to enter in the website right this concept of identity verification is called authentication which is basically ask you who are you okay and you are saying I happy and this is my password and I am a student that your school will identify itself so once you enter this the school will check in their database and find that you are a student of the school okay so that's all about authentication now let's come to authorization now obviously there are other departments in your school like teacher administration department clerical Department Etc right so when you log into your school website with student roles and rights now suppose your school website has these four functionalities uh as a you student and as a student yes you are able to view the result but you as a student cannot edit or submit the result right and only a teacher can do it when a teacher will log in then they have the right to do it then yes you can pay the fees but you do not have any salary therefore you cannot even view this salary tab okay so this kind of access to the resource different resources based on the users roles like student teacher role admin role Etc is called authorization great that's the whole idea and uh remember one thing authentication will always happen before authorization okay all right I think now these concepts are very much clear to you for your lifetime and here I also have written the definition of authentication and authorization these I already explained but written here so that uh while revision just when revision just revising just before the interview from the book will be very quick and fast okay what are the types of authentication in node we have five main types of authentication and it's not just in node but in almost all Technologies okay here are they basic authentication API key authentication token based authentication and JWT authentication is a type of token based authentication only then multiactor authentication and certificate based authentication in the upcoming question one by one we will explore all of these authentications what is basic authentication very simple authentication means verifying the user's identity right now in basic authentication a user will login with a username and password in the UI and then these username and password will be passed to the rest API node rest API and then the rest API will validate these credentials in the database and then only the user will be authenticated see it's very simple and straightforward authentication right no confusion but it has one disadvantage in basic authentication username and password are sent as the plain text only over the network plain desk text sorry the the password is not encrypted or encoded therefore it is not considered a secure method of authentication okay so also there is one more thing in B basic authentication the password is stored in the database in the text format only which is again a security risk okay I will explain you in the upcoming question how to secure the password okay but for now you know the basic advant authentication and its disadvantage both are written here what is basic authentication and what is it dis its disadvantage for the later revision from the book what are the security risk associated with storing password as plain text in nodejs very short but valid and practical question suppose this is your user table and here are the username and password stored as plain text right a storing password like this can be very risky because if someone somehow gets access to your database then that hacker can just use these all usernames and passwords to log into the websites and they can steal your information the access all the things right but if you will use encryption algorithms and save the username and passwords like this in ENC encrypted format in that case even if the hacker gets the these username passwords still they can have they have to first decode them first and there are many en encoding and decoding algorithms therefore it will be bit difficult for them to decode it okay great I think you got it now uh why storing password as plain text in database is a bad idea right and uh the same thing is written here for the risk about the unauthorized access of plain text passwords and uh yes there is one more thing the compromise of other accounts so basically when many users tend they use reuse the same password across multiple accounts right same password for their bank account Facebook everything so again if a hacker knows your Facebook password then they might be knowing your bank password also because it can be same which is again very risky so but but but one thing so Gmail Facebook Banks that's why they never store passwords as plain test and they use different algorithms for encoding and discod password so that's why the same password for you it is same but in the different databases of Bank Facebook it will be stored in a different format by using different encryption decryption algorithms great conclusion is simple never store passwords at plain pass texts in the database as a developer what is the role of hashing and salt in securing passwords a very interesting concept the goal of hashing and solt concept is to secure the password or confidential information okay that's the first thing for example we have a password like this now hashing will be used to encrypt or encode this password using some algorithm for example this ssha 256 is the name of algorithm okay so as a result one encrypted password will be created like this and this is good for one level of security okay but if a hacker also knows your password and also the algorithm name then again it will be no longer secure right therefore to add more security to the password we first create a salt okay by using this bcrypt or crypto Library there are many libraries especially in nodejs so here salt is nothing but it's just a random string okay will be created by these libraries now listen carefully then we combine this salt and the hash password together to create a very very secure password like this here is the salt here is the hash and together they are making a very secure password right and that is the whole idea of hashing and Sol now if the hacker even knows the pass encrypted password and the algorithm but they can't know the solt then they cannot decrypt your password okay they cannot great here I have written the definition of hashing also how can we create hash passwords in nodejs so here I will show you quickly the code for creating a secure hash password using the crypto library for that there are five steps first import the crypto library then Define a function which will hash and Sol the password here inside this function we are passing this our plain text password as the parameter now listen carefully then by using this random bytes method of the crypto Library we will generate a random salt random salt is nothing but a random string only okay then we will create the hash object using one algorithm here it is sha 256 now hash object is there now we will use the update function of this hash object only for combining the above salt string and the plain text password inside the hash object so in short now this hash object has the both thing okay but this hash is an object now and we need a string password right so we will convert this has object to a hexad decimal string by using the digest function of this hash object only great finally we will return the complete secure password by using adding the salt do hash string and the output will be something like this a very long long string now see later when you will try to this is your secure password right so later when you will decode then you will use this first Sol string which will be used and then it will separate the salt and the plain password from the second string okay that's how it work it works and yes you can store this salt string first and hash a string separately in your database to make your password even more secure okay got it great that is the way how to Hash passwords and that is the answer to this question what is API key authentication all right after basic authentication this is another type of authentication and let's see an example here here is one API key example see here this is the screenshot of a postman tool which is used to basically test your apis okay and here we are not passing the username and password C like the basic authentication but we are simply passing this API key like this so this is just very simple API authentication and here the rest what will happen how this API authentication work uh basically the rest API owner or you can say the developer will create an API key and it will he will share with all the users or the clients of the rest API uh this key okay and the same key will be used by multiple clients for authentication in the API see and the benefit is that the same API key can be shared with multiple clients right so managing username and password and storing them in the database is not at all required here because there is only one API key but the disadvantage is also very big so because this API key can be shared by your clients further very easily okay and therefore unw wanted clients can access your rest API which is again not a very good thing right and the same thing is written here also what is API key authentication and what are its disadvantage that's the answer what is token based authentication and JWT authentication nowadays this is the most popular kind of authentication technique used in rest apis here token based authentication is is a type of authentication and when we use JWT as the token in token based authentication then that is JWT authentication and you can also say like JWT authentication is a type of token based authentication also okay so JWT stands for Json web token for interviews this JWT authentication process is very very important and that I'm going to explain here and here are first the main players in the authentication process first is our browser which will act as the front end you can say also front end you can think of it and then we have the rest API in node which you can also call middleware server side back and okay now there are eight steps in this authentication process of JWT first user will from the client side send the username and password through the browser and send them to the API with a post request now of course I'm not saying that browser will send to the client and client will send to the server basically both will together will send to the API server okay then in the Second Step the API will receive these credentials right and they they will authenticate or you can say validate those username and password whether it is valid or not if credentials are valid a jwd token will be created and that will be sent back to the client as a response clear now if the credentials are not valid it will not return return uh API server will not return return uh and uh JW token rather a authentication error will be return then as a next step the client will store this JWT token in the local storage or in the cookies of the browser on okay now listen carefully when the JWT token is stored then for every future or subsequent request for the data from client this token will be sent in the header of every request to the rest API from the client okay got my point token will go every time usern name and uh password are will not go then so now when the API will receive the token it will check and validate the token signature with the help of some algorithm and if the token is valid it must valid means it must be the same JWT token which initially the API has sent to the client okay and if if it is valid then only the API will send the data to the client great finally the client will display the data in the browser and that is the whole process which I make simpler for you and that's the reason why for any website we have to enter username password only once because uh first time after first time you will receive the token and then only the token will be sent for the validation not the username password again and again okay so this is the working of JWT token authentication and yes there are other authentication techniques also but uh this is the most popular one and that is the answer to this question the steps and the explanation okay what are the parts of the JWT token if you want to see a JWT token how it looks actually then here it is and it is a site named JWT .iu which is normally used to decode the JWT token so here on the left side is is the JWT to token separated by do c here we have three parts in different colors the first part we call it header the header mainly consists of two things first is the type of type of token uh which in this case we the type of token is jwd the second thing is the algorith name that is used to generate this token such as hmac s256 those are the popular algorithms then the second part of the token is payload which contains the claims claims means the information about the token like who who is the issuer of the token who issued the token then the subject of the token so subject means which typically identify the user it is basically the user also you can say then the expiration time of the token that and the time when the token was issued so all is like claims the information about the token okay that is payload last is the most important part and that is signature okay so whether your token will valid or not that is verified by the signature only in the rest API when they will receive then they will verify the signature okay here signature is uh created by encoding the header and the payload of the token okay so as I said rest API will receive the token and they will verify the signature great I think that is the whole idea about a single JWT token and here I have also written the three parts of it header payload signature and that's pretty good and that's the answer where JWT token resides in the request see the postman tool is here and JWT token is here and if you see it is inside the request header okay so we we have the inside the request we have the header the body so token will be inside the header here key is this authorization we will see and value is the token value token actual value okay and uh it is written here also in request huder very simple short answer of this question many many congratulations for completing the rest API Milestone and chapters now that we are here we will cover some random topics from node like error handling debugging security performance deployment testing web sockets okay so let's start with the error handl and debugging chapter and here are the questions from it maybe you are already familiar with some of these error handling techniques uh in that case if it is too easy for you then just increase the playback speed of the video so let's start with the first question what is error handling in how many ways you can Implement error handling in node applications let's start with the definition this time error handling is the process of managing errors that occurs during the execution of a program or application okay now there are many ways to handle errors in node projects but it depends on your choice and basically what which methods you prefer and here are the four techniques for error handling the first error handling technique is the triy catch block with synchronous operations okay second is error first call backs using them third technique is using promises with asynchronous operation and fourth and I think it's the most popular one the try catch with a syn AIT for the synchronous operation and if you already know some of these Concepts like the promises a syn await then error handling is very very easy for you okay and in upcoming question I will quickly cover all these techniques also but for now you know what is error handling we have to manage the errors right we have to report them log them and then we have to analyze them for that we have to write some code and that is error handling how to handle errors in synchronous operations using try catch finally let me explain quickly with the help of the code see first we will write all our synchronous code inside this Tri block block okay now whenever any error will occur in this tribe block for example here I'm forcefully intentionally throwing this one error but of course in real application you will have some code and that will throw error when user some user is using it right but here I'm doing it intentionally just to show you how the flows work the flow work okay now to handle this error we will use the catch block like this now what happen the error will be received if there is any error in the tri block the error will be passed to this catch block and this error parameter will have all the details of that error okay so here inside the cat we can log the error to some log file and there are different ways to log and then developer later can analyze and fix that error right so this is try catch is all good for managing the errors but sometimes sometimes there is a situation when we have to execute some code irrespective of the error for example Suppose there are five lines of code inside the Dr block and an error occur at the third line then execution will be immediately transfer to the catch block and the last two lines fourth and fifth line of the tri block block will not be executed right agree but suppose these two lines are like closing some connection and they must be executed okay for that purpose we will use the finally block and we will place those two lines of code inside the finally block the whole point is finally block will execute the exact uh sorry execute the code in decided whether the exception will occur or even if doesn't occur in both cases it will execute so put that code inside here which you want to run whether the error occur or not occur and finally here is our output when the error occurs the catch block is executed and then see finally block code is also executed so that's the output great that is the whole story the whole overview and and the same thing about the try catch and finally is written here also this can help you in the last minute revision just before the interviews very quick and fast from the book what is error first callbacks error first call backs are a way of handling errors only in a synchronous operation in node application okay and their way of working is hidden in their name only focus on the name error first call backs now let me explain and show the code see here is a very simple error first call back function defined okay this is error for it is error first because in this function first parameter is the error object right and second is a call back function because when uh because we can use this function only by passing this function as the parameter in the other function like this see and if you can see the body of this async operation function then it is receiving this error first call back function as the parameter so here if some error so now you understand the naming right error first call back and what how it is uh defined now here if some error will occur then that error will be passed as the argument of this call back function okay and up there the error first call back function that error will be handled getting my point so that is the purpose of this error first call back function to handle the errors now obviously in real projects you will not set the error like this new error object I have did it here okay uh because uh so basically in application the real code the error will become from the user but just I did did to show you so in our real application wherever any function will do some asynchron operation we will pass this error first call back function as a parameter like this and we will reuse it many places in our application okay so for what purpose for managing the errors okay that is the purpose of this function and that is one way of managing the error also great I think now you have your answer and At Last I have written here two sentences about the error first call backs so that your revision will be super easy and fast as well how to handle errors using promises I hope you are already aware about the promises and then you know the 90% of the answer just I will show you here very in very in 50 seconds here is the sample promise code and when this promises is executed and if the operation inside it is successful then this resolve will execute right but if the operation fails then reject will execute and where you can pass the error and this error will be received by the cat block which will actually handle the error okay right that is the short answer answer the short answer is the catch Block in promises is used for error handling with promises so yes uh you have some understanding of promises otherwise uh you have to get it okay so that's the answer to this question how to handle errors using a syn a wait again I hope you already have some idea about a syn AIT in JavaScript or node because here we will only focus on the error handling part of the synovate okay we will not complete like from beginning so here is the function that returns a promise now either you can use the catch keywords to handle the result of this promise or we can use the async function like this okay and there we will call this async function which return Returns the promise okay which was written above by using this await keyword so this is also an alternative way of handling promises result and nowadays it is very popular because of many reason now to handle errors here we can use again our TR catch block like this okay and you already know how TR catch block works right any error in dry block will be sent to the catch block great the short answer is TR clatch block is used with a syn await for handling the errors and that is the answer to this question so sometimes we know big things we know a syn AIT we know promises but this short short question inside from the main questions can confuse us right like how to handle errors in a sy ofit so now you know now you know right how can you debug nodejs application now there are many techniques to debug node applications and it's up to you what you prefer I will share the names of five debugging techniques so first one is you can use this console.log or you can say the second technique is the debugger statement then we have third technique nodejs inspector tools or Visual Studio code debugger debugger and the most basic one you already know I hope Chrome developer tools okay now remember in interviews uh please name only those techniques that you can explain a bit okay never say any word in interviews that you cannot explain because then you will be trapped in your own words okay so speak what you know what you can explain and here I hope you already know this console log and chrome developer tools you already know restart the tool if you don't know no problem okay great that is the short and simple answer of this question all right if you reached here and completed all the questions and answers then congratulation because where there is a will there is a way my best wishes are with you and if you have any question then feel free to ask me in the comment section again all the best for your interviews and career and and if you want to say all the best to me then do like and subscribe and just post one comment how you feel and and whenever you get the job or offer just post one comment okay remember only giving up can stop you now so never give up